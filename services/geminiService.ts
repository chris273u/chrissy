
import { GoogleGenAI, GenerateImagesResponse, GeneratedImage } from "@google/genai";

// Assume process.env.API_KEY is available in the execution environment
const apiKey = process.env.API_KEY;

if (!apiKey) {
  // This error is primarily for the developer during setup.
  // The UI will show a generic error if API calls fail.
  console.error("API_KEY is not configured. Please set the API_KEY environment variable.");
}

const ai = new GoogleGenAI({ apiKey: apiKey || "" }); // Pass empty string if undefined to avoid constructor error, API calls will fail.

export async function generatePixelArt(userPrompt: string): Promise<string> {
  if (!apiKey) {
    throw new Error("API Key not configured. Cannot connect to Gemini API.");
  }

  const fullPrompt = `A high-quality, detailed pixel art image depicting: ${userPrompt}. The style should be reminiscent of classic 16-bit or 32-bit era video game graphics. Ensure sharp pixel definition, vibrant colors, and a clear composition suitable for pixel art. Avoid anti-aliasing.`;

  try {
    const response: GenerateImagesResponse = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002', // Correct model for Imagen 3
      prompt: fullPrompt,
      config: { 
        numberOfImages: 1, 
        outputMimeType: 'image/png' // PNG is generally better for pixel art
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const image: GeneratedImage = response.generatedImages[0];
      if (image.image && image.image.imageBytes) {
        const mimeType = image.image.mimeType || 'image/png';
        return `data:${mimeType};base64,${image.image.imageBytes}`;
      } else {
        throw new Error('Received an empty image from the API.');
      }
    } else {
      throw new Error('No images were generated by the API.');
    }
  } catch (error) {
    console.error('Gemini API call failed:', error);
    if (error instanceof Error) {
      // Check for common API key related messages or other specific errors
      if (error.message.includes("API key not valid")) {
        throw new Error("Invalid API Key. Please check your configuration.");
      }
      throw new Error(`API Error: ${error.message}`);
    }
    throw new Error('An unknown error occurred while communicating with the Gemini API.');
  }
}
